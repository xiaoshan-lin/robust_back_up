// Generated by gencpp from file test_msgs/floatlist_1.msg
// DO NOT EDIT!


#ifndef TEST_MSGS_MESSAGE_FLOATLIST_1_H
#define TEST_MSGS_MESSAGE_FLOATLIST_1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test_msgs
{
template <class ContainerAllocator>
struct floatlist_1_
{
  typedef floatlist_1_<ContainerAllocator> Type;

  floatlist_1_()
    : flag(false)
    , x(0.0)
    , y(0.0)
    , idx(0)  {
    }
  floatlist_1_(const ContainerAllocator& _alloc)
    : flag(false)
    , x(0.0)
    , y(0.0)
    , idx(0)  {
  (void)_alloc;
    }



   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef int8_t _idx_type;
  _idx_type idx;





  typedef boost::shared_ptr< ::test_msgs::floatlist_1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_msgs::floatlist_1_<ContainerAllocator> const> ConstPtr;

}; // struct floatlist_1_

typedef ::test_msgs::floatlist_1_<std::allocator<void> > floatlist_1;

typedef boost::shared_ptr< ::test_msgs::floatlist_1 > floatlist_1Ptr;
typedef boost::shared_ptr< ::test_msgs::floatlist_1 const> floatlist_1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_msgs::floatlist_1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_msgs::floatlist_1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test_msgs::floatlist_1_<ContainerAllocator1> & lhs, const ::test_msgs::floatlist_1_<ContainerAllocator2> & rhs)
{
  return lhs.flag == rhs.flag &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.idx == rhs.idx;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test_msgs::floatlist_1_<ContainerAllocator1> & lhs, const ::test_msgs::floatlist_1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test_msgs::floatlist_1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_msgs::floatlist_1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_msgs::floatlist_1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_msgs::floatlist_1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_msgs::floatlist_1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_msgs::floatlist_1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_msgs::floatlist_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b14086f7038ce2afa371784cb7fd9953";
  }

  static const char* value(const ::test_msgs::floatlist_1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb14086f7038ce2afULL;
  static const uint64_t static_value2 = 0xa371784cb7fd9953ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_msgs::floatlist_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_msgs/floatlist_1";
  }

  static const char* value(const ::test_msgs::floatlist_1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_msgs::floatlist_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool flag\n"
"float64 x\n"
"float64 y\n"
"int8 idx\n"
;
  }

  static const char* value(const ::test_msgs::floatlist_1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_msgs::floatlist_1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.idx);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct floatlist_1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_msgs::floatlist_1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_msgs::floatlist_1_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "idx: ";
    Printer<int8_t>::stream(s, indent + "  ", v.idx);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_MSGS_MESSAGE_FLOATLIST_1_H
