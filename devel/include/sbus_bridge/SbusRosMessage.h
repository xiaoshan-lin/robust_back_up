// Generated by gencpp from file sbus_bridge/SbusRosMessage.msg
// DO NOT EDIT!


#ifndef SBUS_BRIDGE_MESSAGE_SBUSROSMESSAGE_H
#define SBUS_BRIDGE_MESSAGE_SBUSROSMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sbus_bridge
{
template <class ContainerAllocator>
struct SbusRosMessage_
{
  typedef SbusRosMessage_<ContainerAllocator> Type;

  SbusRosMessage_()
    : header()
    , channels()
    , digital_channel_1(false)
    , digital_channel_2(false)
    , frame_lost(false)
    , failsafe(false)  {
      channels.assign(0);
  }
  SbusRosMessage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , channels()
    , digital_channel_1(false)
    , digital_channel_2(false)
    , frame_lost(false)
    , failsafe(false)  {
  (void)_alloc;
      channels.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<uint16_t, 16>  _channels_type;
  _channels_type channels;

   typedef uint8_t _digital_channel_1_type;
  _digital_channel_1_type digital_channel_1;

   typedef uint8_t _digital_channel_2_type;
  _digital_channel_2_type digital_channel_2;

   typedef uint8_t _frame_lost_type;
  _frame_lost_type frame_lost;

   typedef uint8_t _failsafe_type;
  _failsafe_type failsafe;





  typedef boost::shared_ptr< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> const> ConstPtr;

}; // struct SbusRosMessage_

typedef ::sbus_bridge::SbusRosMessage_<std::allocator<void> > SbusRosMessage;

typedef boost::shared_ptr< ::sbus_bridge::SbusRosMessage > SbusRosMessagePtr;
typedef boost::shared_ptr< ::sbus_bridge::SbusRosMessage const> SbusRosMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbus_bridge::SbusRosMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbus_bridge::SbusRosMessage_<ContainerAllocator1> & lhs, const ::sbus_bridge::SbusRosMessage_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.channels == rhs.channels &&
    lhs.digital_channel_1 == rhs.digital_channel_1 &&
    lhs.digital_channel_2 == rhs.digital_channel_2 &&
    lhs.frame_lost == rhs.frame_lost &&
    lhs.failsafe == rhs.failsafe;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbus_bridge::SbusRosMessage_<ContainerAllocator1> & lhs, const ::sbus_bridge::SbusRosMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbus_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89ed6f5b79cb6f2d42c97b061bec3101";
  }

  static const char* value(const ::sbus_bridge::SbusRosMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89ed6f5b79cb6f2dULL;
  static const uint64_t static_value2 = 0x42c97b061bec3101ULL;
};

template<class ContainerAllocator>
struct DataType< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbus_bridge/SbusRosMessage";
  }

  static const char* value(const ::sbus_bridge::SbusRosMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Regular 16 sbus channels with 11 bit value range each\n"
"uint16[16] channels\n"
"\n"
"# Digital channels\n"
"bool digital_channel_1\n"
"bool digital_channel_2\n"
"\n"
"# Frame lost flag\n"
"bool frame_lost\n"
"\n"
"# Failsafe flag\n"
"bool failsafe\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sbus_bridge::SbusRosMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.channels);
      stream.next(m.digital_channel_1);
      stream.next(m.digital_channel_2);
      stream.next(m.frame_lost);
      stream.next(m.failsafe);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SbusRosMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbus_bridge::SbusRosMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbus_bridge::SbusRosMessage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.channels[i]);
    }
    s << indent << "digital_channel_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.digital_channel_1);
    s << indent << "digital_channel_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.digital_channel_2);
    s << indent << "frame_lost: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frame_lost);
    s << indent << "failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBUS_BRIDGE_MESSAGE_SBUSROSMESSAGE_H
