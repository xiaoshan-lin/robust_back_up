<?xml version="1.0"?>
<launch>
  <arg name="laser_enabled"/>
  <arg name="realsense_enabled"/>
  <arg name="robot_namespace"/>
  <arg name="UGV_name"/>
  <arg name="UGV_x"/>
  <arg name="UGV_y"/>
  <arg name="UGV_z"/>
  <arg name="UGV_yaw"/>
  <arg name="uav0"/>
  <arg name="uav1"/>
  <arg name="uav2"/>
  <arg name="uav3"/>
  <arg name="start_idx"/>
  <arg name="ugv_idx"/>
  <arg name="quad_name" default="hummingbird"/>

  <arg name="mav_name" default="$(arg quad_name)"/>
  <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="enable_command_feedthrough" default="false"/>
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="use_ground_truth" value="true"/>
  <arg name="verbose" default="false"/>
  <arg name="debug" default="false"/>

  <arg name="odom_frame_id"   default="odom"/>
  <arg name="base_frame_id"   default="base_footprint"/>
  <arg name="global_frame_id" default="map"/>
  <arg name="odom_topic" default="odom" />
  <arg name="laser_topic" default="scan" />

  <!-- launch husky-->
  <group if="$(eval arg('UGV_name')==0)"> 
          <!-- spawn husky in gazebo-->
          <include file="$(find husky_gazebo)/launch/spawn_husky.launch">
            <arg name="laser_enabled" value="$(arg laser_enabled)"/>
            <arg name="realsense_enabled" value="$(arg realsense_enabled)"/>
            <arg name="multimaster" value="false"/>
            <arg name="robot_namespace" value="$(arg robot_namespace)"/>
            <arg name="x" value="$(arg UGV_x)"/>
            <arg name="y" value="$(arg UGV_y)"/>
            <arg name="z" value="$(arg UGV_z)"/>
            <arg name="yaw" value="$(arg UGV_yaw)"/>
          </include>

          <group ns="$(arg robot_namespace)">

          <!-- launch husky navigation--> 
          <include file="$(find husky_navigation)/launch/move_base.launch">
            <arg name="no_static_map" value="true"/>
          </include>
          <param name="husky_velocity_controller/base_frame_id" value="$(arg robot_namespace)/base_link"/> 
          <param name="move_base_node/global_costmap/global_frame" value="world"/>
          <param name="move_base_node/global_costmap/robot_base_frame" value="$(arg robot_namespace)/base_link"/>
          <param name="move_base_node/local_costmap/global_frame" value="world"/>
          <param name="move_base_node/local_costmap/robot_base_frame" value="$(arg robot_namespace)/base_link"/>

          <!-- husky control center--> 
          <node name="husky_control_center" pkg="test" type="husky_control_center.py" output="screen" 
                args="$(arg start_idx) $(arg robot_namespace) $(arg uav0) $(arg uav1) $(arg uav2) $(arg uav3) $(arg ugv_idx) 
                      $(arg UGV_x) $(arg UGV_y)"/>
     
          <!-- publish base_link-to-world transformation to tf-->
          <node name="message_to_tf" pkg="message_to_tf" type="message_to_tf" output="screen"/>
          <param name="message_to_tf/frame_id" value="/world"/>
          <param name="message_to_tf/odometry_topic" value="/$(arg robot_namespace)/ground_truth/state"/>
           
          <node name="rviz" pkg="rviz" type="rviz" args="-d $(find test)/rviz/husky.rviz"/>
          </group>
  </group>

 <!-- launch turtlebot--> 
  <group if="$(eval arg('UGV_name')==1)">
        <group ns="$(arg robot_namespace)">
          <!-- spawn turtlebot in gazebo -->
          <include file="$(find turtlebot_gazebo)/launch/turtlebot.launch">
            <arg name="turtlebot_x" value="$(arg UGV_x)"/>
            <arg name="turtlebot_y" value="$(arg UGV_y)"/>
            <arg name="turtlebot_z" value="$(arg UGV_z)"/>
            <arg name="turtlebot_yaw" value="$(arg UGV_yaw)"/>
            <arg name="robot_namespace" value="$(arg robot_namespace)"/>
            <arg name="odom_topic" value="ground_truth/state"/>
          </include>
          
          <!--include file="$(find turtlebot_gazebo)/launch/amcl_demo.launch"/-->
          <!-- launch move_base node -->
          <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch">
              <arg name="odom_topic" value="ground_truth/state" />
          </include>
          <param name="move_base_node/global_costmap/global_frame" value="$(arg robot_namespace)/$(arg odom_topic)"/>
          <param name="move_base_node/global_costmap/robot_base_frame" value="$(arg robot_namespace)/$(arg base_frame_id)"/>
          <param name="move_base_node/local_costmap/global_frame" value="$(arg robot_namespace)/$(arg odom_topic)"/>
          <param name="move_base_node/local_costmap/robot_base_frame" value="$(arg robot_namespace)/$(arg base_frame_id)"/>
          <param name="move_base_node/DWAPlannerROS/global_frame_id" value="$(arg robot_namespace)/$(arg odom_frame_id)"/>

          <!-- launch UGV high-level control node -->
          <node name="husky_control_center" pkg="test" type="husky_control_center.py" output="screen" 
                args="$(arg start_idx) $(arg robot_namespace) $(arg uav0) $(arg uav1) $(arg uav2) $(arg uav3) $(arg ugv_idx) 
                      $(arg UGV_x) $(arg UGV_y)"/>

          <node name="rviz" pkg="rviz" type="rviz" args="-d $(find test)/rviz/turtlebot.rviz"/>
        </group>
  </group>

  <!-- UAV !-->
  <group ns="$(arg mav_name)$(arg uav0)">
    <!-- spawn uav in gazebo -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)$(arg uav0)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="$(eval .35 + arg('UGV_x'))"/>
      <arg name="y" value="$(eval 0.43 + arg('UGV_y'))"/>
      <arg name="z" value="1.0"/>
    </include>

    <!-- uav control -->
    <node pkg="rpg_rotors_interface" type="rpg_rotors_interface" 
          name="rpg_rotors_interface" output="screen" >
      <rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />       
      <remap from="odometry" to="ground_truth/odometry" />
      <remap from="rpg_rotors_interface/arm" to="bridge/arm" />
    </node>

    <!-- Autopilot -->
    <node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
       <rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
       <rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
       <rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
          
       <param name="position_controller/use_rate_mode" value="True" />         
       <param name="velocity_estimate_in_world_frame" value="false" />
       <param name="state_estimate_timeout" value="0.1" />
       <param name="control_command_delay" value="0.05" />
       <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />      
       <remap from="autopilot/state_estimate" to="ground_truth/odometry" />
    </node>

  <!-- uav control high-level control, trajectory publisher-->
  <node name="uav_control_center" pkg="test" type="uav_control_center" output="screen" 
          args="$(find test)/resource 0 0 4">  
       <remap from="cmd2UAV" to="/$(arg robot_namespace)/cmd2UAV"/>
  </node>
 </group> 

 <group ns="$(arg mav_name)$(arg uav1)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)$(arg uav1)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="$(eval -0.35 + arg('UGV_x'))"/>
      <arg name="y" value="$(eval 0.43 + arg('UGV_y'))"/>
      <arg name="z" value="1.0"/>
    </include>

    <node pkg="rpg_rotors_interface" type="rpg_rotors_interface" 
          name="rpg_rotors_interface" output="screen" >
      <rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />       
      <remap from="odometry" to="ground_truth/odometry" />
      <remap from="rpg_rotors_interface/arm" to="bridge/arm" />
    </node>

    <!-- Autopilot -->
    <node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
       <rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
       <rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
       <rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
          
       <param name="position_controller/use_rate_mode" value="True" />         
       <param name="velocity_estimate_in_world_frame" value="false" />
       <param name="state_estimate_timeout" value="0.1" />
       <param name="control_command_delay" value="0.05" />
       <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />      
       <remap from="autopilot/state_estimate" to="ground_truth/odometry" />
    </node>

  <node name="uav_control_center" pkg="test" type="uav_control_center" output="screen" 
          args="$(find test)/resource 1 0 2">  
       <remap from="cmd2UAV" to="/$(arg robot_namespace)/cmd2UAV"/>
  </node>
 </group> 

 <group ns="$(arg mav_name)$(arg uav2)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)$(arg uav2)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="$(eval -0.35 + arg('UGV_x'))"/>
      <arg name="y" value="$(eval -0.43 + arg('UGV_y'))"/>
      <arg name="z" value="1.0"/>
    </include>

    <node pkg="rpg_rotors_interface" type="rpg_rotors_interface" 
          name="rpg_rotors_interface" output="screen" >
      <rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />       
      <remap from="odometry" to="ground_truth/odometry" />
      <remap from="rpg_rotors_interface/arm" to="bridge/arm" />
    </node>

    <!-- Autopilot -->
    <node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
       <rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
       <rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
       <rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
          
       <param name="position_controller/use_rate_mode" value="True" />         
       <param name="velocity_estimate_in_world_frame" value="false" />
       <param name="state_estimate_timeout" value="0.1" />
       <param name="control_command_delay" value="0.05" />
       <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />      
       <remap from="autopilot/state_estimate" to="ground_truth/odometry" />
    </node>

  <node name="uav_control_center" pkg="test" type="uav_control_center" output="screen" 
          args="$(find test)/resource 2 0 4">  
       <remap from="cmd2UAV" to="/$(arg robot_namespace)/cmd2UAV"/>
  </node> 
 </group> 

 <group ns="$(arg mav_name)$(arg uav3)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)$(arg uav3)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="$(eval 0.35 + arg('UGV_x'))"/>
      <arg name="y" value="$(eval -0.43 + arg('UGV_y'))"/>
      <arg name="z" value="1.0"/>
    </include>

    <node pkg="rpg_rotors_interface" type="rpg_rotors_interface" 
          name="rpg_rotors_interface" output="screen" >
      <rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />       
      <remap from="odometry" to="ground_truth/odometry" />
      <remap from="rpg_rotors_interface/arm" to="bridge/arm" />
    </node>

    <!-- Autopilot -->
    <node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
       <rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
       <rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
       <rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
          
       <param name="position_controller/use_rate_mode" value="True" />         
       <param name="velocity_estimate_in_world_frame" value="false" />
       <param name="state_estimate_timeout" value="0.1" />
       <param name="control_command_delay" value="0.05" />
       <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />      
       <remap from="autopilot/state_estimate" to="ground_truth/odometry" />
    </node>

  <node name="uav_control_center" pkg="test" type="uav_control_center" output="screen" 
          args="$(find test)/resource 3 0 2">  
       <remap from="cmd2UAV" to="/$(arg robot_namespace)/cmd2UAV"/>
  </node> 
 </group> 

</launch>

